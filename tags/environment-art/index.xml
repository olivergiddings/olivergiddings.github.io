<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Environment Art on OLIVER GIDDINGS</title><link>https://example.org/tags/environment-art/</link><description>Recent content in Environment Art on OLIVER GIDDINGS</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 21 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://example.org/tags/environment-art/index.xml" rel="self" type="application/rss+xml"/><item><title>UNDYING - Breakdown</title><link>https://example.org/post/undying-breakdown/</link><pubDate>Sun, 21 Jul 2024 00:00:00 +0000</pubDate><guid>https://example.org/post/undying-breakdown/</guid><description>&lt;img src="https://img.game8.co/3872004/3372fe1074f32ecd7eaf5ae9e88097fb.png/show" alt="Featured image of post UNDYING - Breakdown" />&lt;h1 id="summary">SUMMARY
&lt;/h1>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/p-EVXF98sEo"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;strong>&lt;a class="link" href="https://store.steampowered.com/app/638990/_/" target="_blank" rel="noopener"
>Undying&lt;/a>&lt;/strong> is my first project as a technical artist. I began as an environment artist and later transitioned into a technical artist role. Here is a graphic comparison between the initial and current versions of the game:&lt;/p>
&lt;p>&lt;img src="https://example.org/post/undying-breakdown/Pictures/Before-City.png"
width="1374"
height="723"
srcset="https://example.org/post/undying-breakdown/Pictures/Before-City_hu6303475f3b66350a46170e98f5b12c9a_1056963_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/Before-City_hu6303475f3b66350a46170e98f5b12c9a_1056963_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="456px"
>&lt;img src="https://example.org/post/undying-breakdown/Pictures/After-City.png"
width="1920"
height="1080"
srcset="https://example.org/post/undying-breakdown/Pictures/After-City_hu051be089b50636e7a8343aecd09fae39_2216567_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/After-City_hu051be089b50636e7a8343aecd09fae39_2216567_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;br>
&lt;img src="https://example.org/post/undying-breakdown/Pictures/Before-RV.png"
width="1375"
height="721"
srcset="https://example.org/post/undying-breakdown/Pictures/Before-RV_hu9012f77a60e1f07d4bb83d0bbd415ebe_1851072_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/Before-RV_hu9012f77a60e1f07d4bb83d0bbd415ebe_1851072_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="457px"
>&lt;img src="https://example.org/post/undying-breakdown/Pictures/After-RV.png"
width="1920"
height="1080"
srcset="https://example.org/post/undying-breakdown/Pictures/After-RV_hu92be31af01bdfb0ec4ed2926cc65e4e6_2082504_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/After-RV_hu92be31af01bdfb0ec4ed2926cc65e4e6_2082504_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;br>
&lt;img src="https://example.org/post/undying-breakdown/Pictures/Before-SuperMarket.png"
width="1375"
height="724"
srcset="https://example.org/post/undying-breakdown/Pictures/Before-SuperMarket_hu453831793eccd91bafa257e41e250348_1222293_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/Before-SuperMarket_hu453831793eccd91bafa257e41e250348_1222293_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="455px"
>&lt;img src="https://example.org/post/undying-breakdown/Pictures/After-SuperMarket.png"
width="1920"
height="1080"
srcset="https://example.org/post/undying-breakdown/Pictures/After-SuperMarket_hu738b8248e5598e975d3d97f512562519_2304299_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/After-SuperMarket_hu738b8248e5598e975d3d97f512562519_2304299_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;br>
&lt;img src="https://example.org/post/undying-breakdown/Pictures/Before-Market.png"
width="1377"
height="720"
srcset="https://example.org/post/undying-breakdown/Pictures/Before-Market_hu351247f028b9558acf5a74991d17141e_1233393_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/Before-Market_hu351247f028b9558acf5a74991d17141e_1233393_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="459px"
>&lt;img src="https://example.org/post/undying-breakdown/Pictures/After-Market.png"
width="1920"
height="1080"
srcset="https://example.org/post/undying-breakdown/Pictures/After-Market_hu566b0f55ddc0395e8f6570dcb9e514a7_2138134_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/After-Market_hu566b0f55ddc0395e8f6570dcb9e514a7_2138134_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;h2 id="duration">DURATION
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Environment Artist&lt;/strong> Intern (Dec 2018 - Mar 2019)&lt;/li>
&lt;li>&lt;strong>Technical Artist&lt;/strong> in Vanimals (Aug 2019 - Jun 2024)&lt;/li>
&lt;/ul>
&lt;h2 id="content">CONTENT
&lt;/h2>&lt;ul>
&lt;li>Created shaders in HLSL/ShaderGraph/ASE for Unity.&lt;/li>
&lt;li>Designed stylized props/environment/characters in 3DsMax/Zbrush.&lt;/li>
&lt;li>Developed VFX in Unity.&lt;/li>
&lt;li>Built tools in C#, MaxScript/Python for 3DsMax.&lt;/li>
&lt;li>Worked on level art and light baking, implementing them with tools and shaders.&lt;/li>
&lt;li>Profiled and improved graphics and performance.&lt;/li>
&lt;li>Optimized workflow and pipeline.&lt;/li>
&lt;li>Collaborated with engineers to ship the game on Nintendo Switch, Mobile, and VR.&lt;/li>
&lt;/ul>
&lt;h1 id="rendering">RENDERING
&lt;/h1>&lt;h2 id="cel-shading">CEL-SHADING
&lt;/h2>&lt;p>We implemented a simple cel-shading technique with stylized Fresnel and built an HLSL library to ensure the modularity and reusability of functions.&lt;/p>
&lt;p>&lt;img src="https://cdnb.artstation.com/p/assets/images/images/077/821/363/original/oliver-giddings-undying-shader.gif?1720456398"
loading="lazy"
alt="Character Shader"
>&lt;/p>
&lt;p>We used shaders to control saturation instead of relying on post-processing, which made it easier to achieve the desired effects. For example, in Undying, the city loses power midway through the game. To create a contrasting mood, the saturation in well-lit areas remains normal, while the overall scene is slightly desaturated. This way, when players are inside a house without light, it evokes a sense of hopelessness. Once the power is restored, the environment becomes brighter and more saturated, enhancing the contrast in mood.&lt;/p>
&lt;p>&lt;img src="https://cdna.artstation.com/p/assets/images/images/077/821/394/large/oliver-giddings-scenesaturate.jpg?1720456445"
loading="lazy"
alt="Saturation Control"
>&lt;img src="https://cdnb.artstation.com/p/assets/images/images/077/821/377/original/oliver-giddings-lightcomparison.gif?1720456423"
loading="lazy"
alt="Light Comparison"
>&lt;/p>
&lt;p>We needed a Time of Day (TOD) system, so we used light maps to store light information and ambient occlusion (AO), and light probes for dynamic and small objects. We also used a global variable to control other shaders such as environment VFX and water.&lt;/p>
&lt;p>&lt;img src="https://cdna.artstation.com/p/assets/images/images/078/293/864/original/oliver-giddings-gifmaker-me-24.gif?1721730375"
loading="lazy"
alt="TOD Preview"
>&lt;img src="https://cdna.artstation.com/p/assets/images/images/077/821/390/original/oliver-giddings-scene-progress.gif?1720456439"
loading="lazy"
alt="Environment Lit Progress"
>&lt;/p>
&lt;p>The item shader is based on our cel-shading, with an added glow to make it more noticeable.&lt;/p>
&lt;p>&lt;img src="https://cdna.artstation.com/p/assets/images/images/077/821/374/original/oliver-giddings-item-glow.gif?1720456418"
loading="lazy"
alt="Item Glow"
>&lt;/p>
&lt;p>To differentiate the glow, we added some offset based on the item&amp;rsquo;s position:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-HLSL" data-lang="HLSL">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//To create offset for each glowing item.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">float3&lt;/span> objectPosition &lt;span style="color:#f92672">=&lt;/span> IN.objectPosition.xyz;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UV &lt;span style="color:#f92672">+=&lt;/span> ((objectPosition.x &lt;span style="color:#f92672">+&lt;/span> objectPosition.z));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="outline">OUTLINE
&lt;/h2>&lt;p>We used simple Vertex Extrusion to create our outline. In the shader, we scaled the vertices along their normals in the opposite direction to create an expanded silhouette. This is easy to achieve, but it doesn&amp;rsquo;t look good when normal directions are not continuous.&lt;/p>
&lt;p>&lt;img src="https://example.org/post/undying-breakdown/Pictures/BadOutline.png"
width="2559"
height="1527"
srcset="https://example.org/post/undying-breakdown/Pictures/BadOutline_huc8429b82bf4ad8c460a8e7c1cfe35079_1895622_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/BadOutline_huc8429b82bf4ad8c460a8e7c1cfe35079_1895622_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Original Normal"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="402px"
>&lt;img src="https://example.org/post/undying-breakdown/Pictures/GoodOutline.png"
width="2559"
height="1527"
srcset="https://example.org/post/undying-breakdown/Pictures/GoodOutline_hu130378a9903b6e76ea520c6deff68fe0_2512743_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/GoodOutline_hu130378a9903b6e76ea520c6deff68fe0_2512743_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Modified Normal"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="402px"
>&lt;/p>
&lt;p>So, we used C# tools to calculate smoothed normals for each mesh:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C#" data-lang="C#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//SmoothNormal.cs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//To create offset for each glowing item.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> List&amp;lt;Vector3&amp;gt; GetSmoothNormals(Mesh mesh)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//Group vertices by location&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> groups = mesh.vertices.Select((vertex,index)=&amp;gt; &lt;span style="color:#66d9ef">new&lt;/span> KeyValuePair&amp;lt;Vector3,&lt;span style="color:#66d9ef">int&lt;/span>&amp;gt;(vertex,index)).GroupBy(pair=&amp;gt;pair.Key);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> smoothNormals = &lt;span style="color:#66d9ef">new&lt;/span> List&amp;lt;Vector3&amp;gt;(mesh.normals);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//Average normals for grouped vertices&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">foreach&lt;/span>(&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#66d9ef">group&lt;/span> &lt;span style="color:#66d9ef">in&lt;/span> groups)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//Skip single vertices&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#66d9ef">group&lt;/span>.Count() == &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//Calculate the average normal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> smoothNormal = Vector3.zero;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">foreach&lt;/span>(&lt;span style="color:#66d9ef">var&lt;/span> pair &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#66d9ef">group&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> smoothNormal += smoothNormals[pair.Value];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> smoothNormal.Normalize();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//Assign smooth normal to each vertex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">foreach&lt;/span>(&lt;span style="color:#66d9ef">var&lt;/span> pair &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#66d9ef">group&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> smoothNormals[pair.Value] = smoothNormal;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> smoothNormals;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> SetSmoothNormalsToTangent(&lt;span style="color:#66d9ef">this&lt;/span> Mesh mesh)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> normals = GetSmoothNormals(mesh);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> tangents = normals.Select(normal =&amp;gt; &lt;span style="color:#66d9ef">new&lt;/span> Vector4(normal.x, normal.y, normal.z, &lt;span style="color:#ae81ff">1&lt;/span>)).ToList();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mesh.SetTangents(tangents);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We called this function in our import pipeline to store the smoothed normals into the mesh&amp;rsquo;s tangent:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C#" data-lang="C#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//Undying_FBXImporter.cs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//Undying_FBXImporter : AssetPostProcessor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> OnPostprocessModel(GameObject g)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SetSmoothNormalToTangent(g.transform);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> SetSmoothNormalToTangent(Transform t)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (t.gameObject.TryGetComponent&amp;lt;MeshFilter&amp;gt;(&lt;span style="color:#66d9ef">out&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> meshFilter))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(meshFilter.sharedMesh != &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> meshFilter.sharedMesh.SetSmoothNormalsToTangent();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Recurse&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">foreach&lt;/span> (Transform child &lt;span style="color:#66d9ef">in&lt;/span> t)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SetSmoothNormalToTangent(child);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is the result in the mesh&amp;rsquo;s inspector:&lt;/p>
&lt;p>&lt;img src="https://example.org/post/undying-breakdown/Pictures/NormalView.png"
width="658"
height="939"
srcset="https://example.org/post/undying-breakdown/Pictures/NormalView_hub61bcf4cc7a379369701ba3756d78962_66807_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/NormalView_hub61bcf4cc7a379369701ba3756d78962_66807_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Normal"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="168px"
>&lt;img src="https://example.org/post/undying-breakdown/Pictures/TangentView.png"
width="658"
height="939"
srcset="https://example.org/post/undying-breakdown/Pictures/TangentView_hu96e268fb4cc7de289cbf960a084f3b68_129537_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/TangentView_hu96e268fb4cc7de289cbf960a084f3b68_129537_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Tangent"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="168px"
>&lt;/p>
&lt;h2 id="water">WATER
&lt;/h2>&lt;p>In Undying, we used scene depth to calculate the water&amp;rsquo;s foam and stored the smoothed foam to create more layers.&lt;/p>
&lt;p>&lt;img src="https://cdna.artstation.com/p/assets/images/images/077/821/210/original/oliver-giddings-water-process.gif?1720456163"
loading="lazy"
alt="Water Process"
>&lt;/p>
&lt;p>The flow uses model UV..
&lt;img src="https://example.org/post/undying-breakdown/Pictures/8.FlowExplain.jpg"
width="2009"
height="1320"
srcset="https://example.org/post/undying-breakdown/Pictures/8.FlowExplain_hu7e804a7c900fe347b95139d685300073_398246_480x0_resize_q75_box.jpg 480w, https://example.org/post/undying-breakdown/Pictures/8.FlowExplain_hu7e804a7c900fe347b95139d685300073_398246_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Water UV"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="365px"
>&lt;/p>
&lt;p>We used Voronoi noise to create foam patterns. To make it look more natural, we used two layers of noise to control the edges.&lt;/p>
&lt;p>&lt;img src="https://example.org/post/undying-breakdown/Pictures/9.FoamLayer.jpg"
width="2009"
height="1320"
srcset="https://example.org/post/undying-breakdown/Pictures/9.FoamLayer_hu722ba1e605cdf345682ec30d4b94fdc1_533110_480x0_resize_q75_box.jpg 480w, https://example.org/post/undying-breakdown/Pictures/9.FoamLayer_hu722ba1e605cdf345682ec30d4b94fdc1_533110_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="First Foam"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="365px"
>&lt;img src="https://example.org/post/undying-breakdown/Pictures/10.SecondLayer.jpg"
width="2009"
height="1320"
srcset="https://example.org/post/undying-breakdown/Pictures/10.SecondLayer_hu723ecca615696686ca193a3f354c9498_493957_480x0_resize_q75_box.jpg 480w, https://example.org/post/undying-breakdown/Pictures/10.SecondLayer_hu723ecca615696686ca193a3f354c9498_493957_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Second Foam"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="365px"
>&lt;/p>
&lt;h2 id="others">OTHERS
&lt;/h2>&lt;h3 id="look-through">LOOK THROUGH
&lt;/h3>&lt;p>We used render objects to create look-through passes.&lt;/p>
&lt;p>&lt;img src="https://cdna.artstation.com/p/assets/images/images/077/821/388/original/oliver-giddings-lookthough.gif?1720456432"
loading="lazy"
alt="Look Through"
>&lt;/p>
&lt;h3 id="blood">BLOOD
&lt;/h3>&lt;p>We initially used meshes to introduce blood stains, but they lacked variation. Players noticed that the blood looked too similar. So, I created a procedural blood pattern based on position. Blood stains are planes in the world, so they don&amp;rsquo;t use the Y-axis to control height. I used the Y-axis to create offsets for more variation.&lt;/p>
&lt;p>&lt;img src="https://cdna.artstation.com/p/assets/images/images/077/821/602/large/oliver-giddings-blood-old.jpg?1720456829"
loading="lazy"
alt="Old"
>
&lt;img src="https://cdnb.artstation.com/p/assets/images/images/077/822/453/original/oliver-giddings-gifmaker-me-14.gif?1720458277"
loading="lazy"
alt="New"
>
&lt;img src="https://cdnb.artstation.com/p/assets/images/images/077/822/799/large/oliver-giddings-3dc4b035b01d951d25d23e4d4ed7297.jpg?1720458877"
loading="lazy"
alt="Shader"
>&lt;/p>
&lt;h3 id="skybox">SKYBOX
&lt;/h3>&lt;p>Undying is a top-down game, but we needed a skybox for some cut-scenes. I created a simple stylized procedural skybox. The sun&amp;rsquo;s position is static, as required by our designer.&lt;/p>
&lt;p>&lt;img src="https://cdnb.artstation.com/p/assets/images/images/077/822/969/original/oliver-giddings-skybox-min.gif?1720459148"
loading="lazy"
alt="Skybox"
>
&lt;img src="https://cdna.artstation.com/p/assets/images/images/077/822/950/large/oliver-giddings-skyboxgraph.jpg?1720459105"
loading="lazy"
alt="Made in Shader Graph"
>&lt;/p>
&lt;h3 id="post-processing">POST-PROCESSING
&lt;/h3>&lt;p>&lt;img src="https://example.org/Shader/PoisonScreen.gif"
loading="lazy"
alt="Poisoned"
>&lt;/p>
&lt;h1 id="modeling">MODELING
&lt;/h1>&lt;p>We only had two 3D artists on the team, so I had to do a lot of modeling tasks. Here are some of the models I created:&lt;/p>
&lt;p>&lt;img src="https://cdna.artstation.com/p/assets/images/images/077/818/066/large/oliver-giddings-model-character.jpg?1720451034"
loading="lazy"
>
&lt;img src="https://cdna.artstation.com/p/assets/images/images/077/818/056/large/oliver-giddings-model-vehicle.jpg?1720451027"
loading="lazy"
>
&lt;img src="https://cdna.artstation.com/p/assets/images/images/077/818/106/large/oliver-giddings-model-item.jpg?1720451091"
loading="lazy"
>&lt;/p>
&lt;h1 id="environment-art">ENVIRONMENT ART
&lt;/h1>&lt;p>I uploaded all of my environment artwork to Artstation. You can check it out here: : &lt;a class="link" href="https://www.artstation.com/olivergiddings/albums/13101857" target="_blank" rel="noopener"
>https://www.artstation.com/olivergiddings/albums/13101857&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://example.org/post/undying-breakdown/Pictures/EnvironmentArt.png"
width="1723"
height="582"
srcset="https://example.org/post/undying-breakdown/Pictures/EnvironmentArt_hu4a73d3002d0ad4ccb80b2252d7207ae6_1644888_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/EnvironmentArt_hu4a73d3002d0ad4ccb80b2252d7207ae6_1644888_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="296"
data-flex-basis="710px"
>&lt;/p>
&lt;h1 id="vfx">VFX
&lt;/h1>&lt;p>I completed all the VFX work for Undying. The VFX work is also uploaded to Artstation for you to view: &lt;a class="link" href="https://www.artstation.com/artwork/QXde43" target="_blank" rel="noopener"
>https://www.artstation.com/artwork/QXde43&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://cdna.artstation.com/p/assets/images/images/077/820/856/original/oliver-giddings-gifmaker-me-18.gif?1720455691"
loading="lazy"
>&lt;/p>
&lt;h2 id="volumetric-light">Volumetric light
&lt;/h2>&lt;p>The volumetric light we use in Undying is actually a rigged square. This approach allows us to achieve clean volumetric lighting at a low performance cost.&lt;/p>
&lt;p>&lt;img src="https://example.org/post/undying-breakdown/Pictures/Volumetric.gif"
width="1000"
height="528"
srcset="https://example.org/post/undying-breakdown/Pictures/Volumetric_hufc617bba5ba5009a74d4e9fb8929fa02_7739073_480x0_resize_box_1.gif 480w, https://example.org/post/undying-breakdown/Pictures/Volumetric_hufc617bba5ba5009a74d4e9fb8929fa02_7739073_1024x0_resize_box_1.gif 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="454px"
>&lt;/p>
&lt;h2 id="soft-edge">Soft Edge
&lt;/h2>&lt;p>The particle shader in Undying is quite simple. We use camera depth in the shader graph to create soft edges for particles.&lt;/p>
&lt;p>&lt;img src="https://example.org/post/undying-breakdown/Pictures/On.png"
width="696"
height="348"
srcset="https://example.org/post/undying-breakdown/Pictures/On_hu8d04c20224ffbbbb3b5aefd0133aef49_257839_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/On_hu8d04c20224ffbbbb3b5aefd0133aef49_257839_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;img src="https://example.org/post/undying-breakdown/Pictures/Off.png"
width="711"
height="364"
srcset="https://example.org/post/undying-breakdown/Pictures/Off_hud44baff5b08ce253887acd4d9530c0de_279028_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/Off_hud44baff5b08ce253887acd4d9530c0de_279028_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="468px"
>&lt;/p>
&lt;p>&lt;img src="https://example.org/post/undying-breakdown/Pictures/Alpha.png"
width="816"
height="300"
srcset="https://example.org/post/undying-breakdown/Pictures/Alpha_hu205a7be37a8ee4447abd93229203b11d_34897_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/Alpha_hu205a7be37a8ee4447abd93229203b11d_34897_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="272"
data-flex-basis="652px"
>&lt;/p>
&lt;h1 id="tools--pipeline">TOOLS &amp;amp; PIPELINE
&lt;/h1>&lt;h2 id="tod-tool">TOD Tool
&lt;/h2>&lt;p>Undying contains hundreds of scenes. Manually setting up everything for each scene would be extremely time-consuming. To streamline this process, I developed a tool to initialize basic lighting objects and environment settings. This allows anyone on the team to easily make adjustments and simplifies debugging for artists.&lt;/p>
&lt;p>&lt;img src="https://cdna.artstation.com/p/assets/images/images/078/294/688/original/oliver-giddings-gifmaker-me19-ezgif-com-crop.gif?1721731848"
loading="lazy"
>&lt;/p>
&lt;h2 id="thumbnail-generator">Thumbnail Generator
&lt;/h2>&lt;p>While most of our icons are created by our 2D artists, our designers later decided that players should be able to bring &amp;ldquo;anything&amp;rdquo; they like into their homes. This required icons for each prop. To facilitate this, I created a thumbnail generator tool for batch rendering icons. We simply drag existing prefabs into the tool, click &amp;ldquo;batch render,&amp;rdquo; and we get these nice little icons. The tool also supports background sprites, allowing us to place sprites on the canvas and render them with the icons.&lt;/p>
&lt;p>&lt;img src="https://example.org/post/undying-breakdown/Pictures/ThumbnailGen_01.png"
width="1474"
height="829"
srcset="https://example.org/post/undying-breakdown/Pictures/ThumbnailGen_01_hua4575afd4ad6731a08565a2d3a8b85a2_433301_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/ThumbnailGen_01_hua4575afd4ad6731a08565a2d3a8b85a2_433301_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;img src="https://example.org/post/undying-breakdown/Pictures/ThumbnailGen_02.png"
width="1146"
height="883"
srcset="https://example.org/post/undying-breakdown/Pictures/ThumbnailGen_02_hu34db9df06fe6d4fd7e6337525fa9a774_358917_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/ThumbnailGen_02_hu34db9df06fe6d4fd7e6337525fa9a774_358917_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="311px"
>&lt;img src="https://example.org/post/undying-breakdown/Pictures/ThumbnailGen_03.png"
width="1063"
height="844"
srcset="https://example.org/post/undying-breakdown/Pictures/ThumbnailGen_03_hu76cbe71f028aa8073912978b0928ae27_520070_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/ThumbnailGen_03_hu76cbe71f028aa8073912978b0928ae27_520070_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="302px"
>&lt;/p>
&lt;h2 id="other-tools">Other tools
&lt;/h2>&lt;p>My goal was to transform commonly used controls into tools to streamline our workflow.&lt;/p>
&lt;p>&lt;img src="https://example.org/post/undying-breakdown/Pictures/ArtTools.png"
width="1056"
height="909"
srcset="https://example.org/post/undying-breakdown/Pictures/ArtTools_hud6d57b5f4f7e110b3b13ef4489003f75_83102_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/ArtTools_hud6d57b5f4f7e110b3b13ef4489003f75_83102_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="278px"
>&lt;img src="https://example.org/post/undying-breakdown/Pictures/Common.png"
width="582"
height="546"
srcset="https://example.org/post/undying-breakdown/Pictures/Common_hufede31785fab1294dad696ecbb925cdf_52099_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/Common_hufede31785fab1294dad696ecbb925cdf_52099_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>&lt;/p>
&lt;h2 id="import-pipeline">Import pipeline
&lt;/h2>&lt;p>To ensure outlines work correctly, we need to use script-generated normal information. As it&amp;rsquo;s impractical to set up every model manually, I incorporated everything into the asset preprocessor to streamline this pipeline. I also created an export tool for 3ds Max.&lt;/p>
&lt;p>&lt;img src="https://example.org/post/undying-breakdown/Pictures/Pipeline_01.png"
width="2445"
height="1246"
srcset="https://example.org/post/undying-breakdown/Pictures/Pipeline_01_hu845596596cb3a335b6ce5da998e042bd_2158099_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/Pipeline_01_hu845596596cb3a335b6ce5da998e042bd_2158099_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="470px"
>&lt;img src="https://example.org/post/undying-breakdown/Pictures/Pipeline_02.png"
width="1800"
height="936"
srcset="https://example.org/post/undying-breakdown/Pictures/Pipeline_02_huc047b7ffc5e5b49c720c66c08ef9ef5a_590362_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/Pipeline_02_huc047b7ffc5e5b49c720c66c08ef9ef5a_590362_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="461px"
>&lt;img src="https://example.org/post/undying-breakdown/Pictures/Pipeline_03.png"
width="1825"
height="931"
srcset="https://example.org/post/undying-breakdown/Pictures/Pipeline_03_hued47d9307eb9fdf5c600328cb70e14f3_877551_480x0_resize_box_3.png 480w, https://example.org/post/undying-breakdown/Pictures/Pipeline_03_hued47d9307eb9fdf5c600328cb70e14f3_877551_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="470px"
>&lt;/p>
&lt;p>Thank you for reading :）&lt;/p></description></item></channel></rss>