[{"content":"SUMMARY Undying is my first project as a technical artist. I started as an environment artist and later transitioned into a technical artist role. This is a graphic comparison between the first version and the current version.\nDURATION Environment Artist Intern (Dec 2018 - Mar 2019) Technical Artist in Vanimals (Aug 2019 - Jun 2024) CONTENT Create shaders in HLSL/ShaderGraph/ASE for Unity. Create stylized props/environment/characters in 3DsMax/Zbrush. Create VFX in Unity. Create tools in C#, MaxScript/Python for 3DsMax. Create level art and light baking, and implemented it with tools and shaders. Profile and improved graphics and performance. Optimize workflow and pipeline. Cooperate with engineers to ship the game on Nintendo Switch, Mobile, and VR. RENDERING CEL-SHADING We implemented simple cel-shading with stylized fresnel and built an HLSL library to ensure the modularity and reusability of functions.\nWe used shaders to control the saturation instead of relying on post-processing, making it easier to achieve the desired effects. For instance, in the game Undying, the city loses power midway through the game. To create a contrasting mood, the saturation in well-lit areas remains normal, while the overall scene is slightly desaturated. This way, when players are inside a house without light, it evokes a sense of hopelessness. Once the power is restored, the environment becomes brighter and more saturated, enhancing the contrast in mood.\nAs we needed a TOD system, we used light maps to store light information and AO, and light probes for dynamic and small objects. We also used a global variable to control other shaders such as environment VFX and water.\nThe item shader is based on our cel-shading, with added glow to make it more noticeable.\nWe found that the glow looked too similar, so we added some offset based on its position.\n//To create offset for each glowing item. const float3 objectPosition = IN.objectPosition.xyz; UV += ((objectPosition.x + objectPosition.z)); OUTLINE We used simple Vertex Extrusion to create our outline. In the shader, we scaled the vertices along their normals in the opposite direction to create an expanded silhouette. This is easy to achieve, but it doesn\u0026rsquo;t look good when normal directions are not continuous.\nSo, we used C# tools to calculate smoothed normals for each mesh.\n//SmoothNormal.cs //To create offset for each glowing item. private static List\u0026lt;Vector3\u0026gt; GetSmoothNormals(Mesh mesh) { //Group vertices by location var groups = mesh.vertices.Select((vertex,index)=\u0026gt; new KeyValuePair\u0026lt;Vector3,int\u0026gt;(vertex,index)).GroupBy(pair=\u0026gt;pair.Key); var smoothNormals = new List\u0026lt;Vector3\u0026gt;(mesh.normals); //Average normals for grouped vertices foreach(var group in groups) { //Skip single vertices if(group.Count() == 1) { continue; } //Calculate the average normal var smoothNormal = Vector3.zero; foreach(var pair in group) { smoothNormal += smoothNormals[pair.Value]; } smoothNormal.Normalize(); //Assign smooth normal to each vertex foreach(var pair in group) { smoothNormals[pair.Value] = smoothNormal; } } return smoothNormals; } public static void SetSmoothNormalsToTangent(this Mesh mesh) { var normals = GetSmoothNormals(mesh); var tangents = normals.Select(normal =\u0026gt; new Vector4(normal.x, normal.y, normal.z, 1)).ToList(); mesh.SetTangents(tangents); } And we called this function in our import pipeline to store the smoothed normals into the mesh\u0026rsquo;s tangent.\n//Undying_FBXImporter.cs //Undying_FBXImporter : AssetPostProcessor void OnPostprocessModel(GameObject g) { SetSmoothNormalToTangent(g.transform); } void SetSmoothNormalToTangent(Transform t) { if (t.gameObject.TryGetComponent\u0026lt;MeshFilter\u0026gt;(out var meshFilter)) { if(meshFilter.sharedMesh != null) { meshFilter.sharedMesh.SetSmoothNormalsToTangent(); } } // Recurse foreach (Transform child in t) { SetSmoothNormalToTangent(child); } } This is the result in the mesh\u0026rsquo;s inspector.\nWATER In Undying, we used scene depth to calculate the water\u0026rsquo;s foam, and I stored the smoothed foam to create more layers.\nThe flow uses model UV since the river is a static mesh. I used Voronoi noise to create foam patterns. To make it look more natural, we used two layers of noise to control the edges.\nOTHERS LOOK THROUGH I used render objects to create look-through passes.\nBLOOD We initially used meshes to introduce blood stains, but they lacked variation. Players noticed that the blood looked too similar. So, I created a procedural blood pattern based on position. Blood stains are planes in the world, so they don\u0026rsquo;t use the Y-axis to control height. I used the Y-axis to create offsets for more variation.\nSKYBOX Undying is a top-down game, but we needed a skybox for some cut-scenes. I created a simple stylized procedural skybox. The sun\u0026rsquo;s position is static, as required by our designer.\nPOST-PROCESSING MODELING We only had two 3D artists on the team, so I had to do a lot of modeling tasks. I believe I created at least half of the models in the game. Here are some of the models I created:\nENVIRONMENT ART I uploaded all of my environment artwork to Artstation. You can check it out here: : https://www.artstation.com/olivergiddings/albums/13101857\nVFX I did all the VFX work for Undying. The VFX work is also uploaded to Artstation for you to check out :ï¼‰ https://www.artstation.com/artwork/QXde43\nVolumetric light The volumetric light we use in Undying is actually a rigged square, So is a lot easier for us to achieve clean volumetric light in low cost.\nShader Breakdown The shader of particles in Undying is quite simple, We use camera depth to create soft edges for particles in shader graph.\nTOOLS \u0026amp; PIPELINE TOD Tool We have hundreds of scenes in Undying. Manually setting up everything for each scene is very time-consuming. To streamline this process, I developed a tool to initialize basic lighting objects and environment settings. This allows anyone on the team to easily make adjustments. And also easier to debug by artists.\nThumbnail Generator Most of our icons are created by our 2D artist. However, in the later stages of development, our designers came up with the idea that players should be able to bring \u0026ldquo;anything\u0026rdquo; they like into their homes. This requires icons for each prop. To facilitate this, I created a thumbnail generator tool for batch rendering icons. We simply drag our existing prefabs into the tool, click batch render, and we get these nice little icons. This tool also supports background sprites. We can place sprites on the canvas and render them with the icons.\nOther tools My goal was to make some commonly used control into tools to make our live easier.\nImport pipeline As we need the outline works correctly, we need to use script generated normal information. And again is hard to set every model mannualy, So I put everything into the assets pre processor to make this pipeline smoother. and also export tool from 3DSMAX\n","date":"2024-07-21T00:00:00Z","image":"https://img.game8.co/3872004/3372fe1074f32ecd7eaf5ae9e88097fb.png/show","permalink":"https://example.org/post/undying-breakdown/","title":"UNDYING - Breakdown"}]